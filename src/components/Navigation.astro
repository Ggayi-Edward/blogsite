---
const navItems = [
  { name: 'Home', url: '/' },
  { name: 'Blog', url: '/blog' },
  { name: 'Art', url: '/art' },
  { name: 'About', url: '/about' },
  { name: 'Contact', url: '/contact' }
];

const currentPath = Astro.url.pathname;
---

<header class="sticky top-0 z-50 w-full bg-white/80 dark:bg-gray-950/80 backdrop-blur-lg border-b border-gray-200 dark:border-gray-800">
  <div class="container flex items-center justify-between h-16 md:h-20">
    <!-- Logo -->
    <a href="/" class="text-xl md:text-2xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-primary-600 to-secondary-600 dark:from-primary-400 dark:to-secondary-400 hover:opacity-80 transition-opacity">
      Modern Blog
    </a>

    <!-- Mobile menu button -->
    <button id="mobile-menu-button" aria-label="Toggle menu" class="p-2 md:hidden z-50">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
      </svg>
    </button>

    <!-- Desktop navigation -->
    <nav class="hidden md:flex items-center space-x-8">
      <ul class="flex items-center space-x-8">
        {navItems.map(item => (
          <li>
            <a 
              href={item.url} 
              class:list={[
                'relative font-medium hover:text-primary-600 dark:hover:text-primary-400 transition-colors py-2',
                { 
                  'text-primary-600 dark:text-primary-400 after:absolute after:bottom-0 after:left-0 after:w-full after:h-0.5 after:bg-primary-600 dark:after:bg-primary-400': 
                    currentPath === item.url || (item.url !== '/' && currentPath.startsWith(item.url)) 
                }
              ]}
            >
              {item.name}
            </a>
          </li>
        ))}
      </ul>
      
      <!-- Dark mode toggle -->
      <button id="theme-toggle" aria-label="Toggle dark mode" class="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full transition-colors">
        <!-- Sun icon (for dark mode) -->
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 hidden dark:block">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
        </svg>
        
        <!-- Moon icon (for light mode) -->
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 block dark:hidden">
          <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
        </svg>
      </button>
    </nav>
  </div>
  
  <!-- Mobile menu -->
  <div id="mobile-menu" class="hidden bg-white dark:bg-gray-950 w-full h-[calc(100vh-4rem)] overflow-y-auto md:hidden">
    <div class="container px-6 py-8">
      <button id="mobile-menu-close" aria-label="Close menu" class="sticky top-4 right-4 p-2 float-right">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
      
      <nav class="flex-1 flex flex-col justify-center clear-both pt-8">
        <ul class="space-y-8 text-center">
          {navItems.map(item => (
            <li>
              <a 
                href={item.url} 
                class:list={[
                  'text-3xl font-medium hover:text-primary-600 dark:hover:text-primary-400 transition-colors',
                  { 'text-primary-600 dark:text-primary-400': currentPath === item.url || (item.url !== '/' && currentPath.startsWith(item.url)) }
                ]}
              >
                {item.name}
              </a>
            </li>
          ))}
        </ul>
      </nav>
      
      <!-- Mobile dark mode toggle -->
      <div class="mt-8 flex justify-center">
        <button id="mobile-theme-toggle" aria-label="Toggle dark mode" class="p-2 flex items-center space-x-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full transition-colors">
          <span class="dark:hidden">Dark Mode</span>
          <span class="hidden dark:block">Light Mode</span>
          
          <!-- Sun icon (for dark mode) -->
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 hidden dark:block">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
          </svg>
          
          <!-- Moon icon (for light mode) -->
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 block dark:hidden">
            <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</header>

<script>
  import { gsap } from 'gsap';

  document.addEventListener('astro:page-load', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenuClose = document.getElementById('mobile-menu-close');
    const mobileMenu = document.getElementById('mobile-menu');
    const themeToggle = document.getElementById('theme-toggle');
    const mobileThemeToggle = document.getElementById('mobile-theme-toggle');

    // Mobile menu animation
    const menuTl = gsap.timeline({ paused: true });
    menuTl.fromTo(mobileMenu, { 
      height: 0,
      display: 'none'
    }, {
      height: 'calc(100vh - 4rem)',
      display: 'block',
      duration: 0.3,
      ease: 'power2.out'
    });

    // Mobile menu toggle
    mobileMenuButton?.addEventListener('click', () => {
      menuTl.play();
    });

    mobileMenuClose?.addEventListener('click', () => {
      menuTl.reverse();
    });

    // Theme toggle function
    function toggleTheme() {
      if (document.documentElement.classList.contains('dark')) {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      } else {
        document.documentElement.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      }
    }

    // Add event listeners for theme toggles
    themeToggle?.addEventListener('click', toggleTheme);
    mobileThemeToggle?.addEventListener('click', toggleTheme);

    // Animate navigation items on page load
    gsap.from('nav a', {
      y: -10,
      opacity: 0,
      duration: 0.5,
      stagger: 0.1,
      ease: 'power2.out'
    });
  });
</script>